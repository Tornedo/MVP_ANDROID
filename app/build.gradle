//noinspection GradleCompatible
apply plugin: 'com.android.application'


ext {
    support_version = '23.4.0'
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "http://dl.bintray.com/lukaville/maven" }
    maven { url "https://jitpack.io" }
}

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

}

android {
    compileSdkVersion 28
    //buildToolsVersion '25.0.2'
    defaultConfig {
        applicationId 'com.tsl.app'
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 96
        versionName '1.1.1'
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        // incremental = true;
        preDexLibraries false
        javaMaxHeapSize "4g"
    }

    signingConfigs {

    }

    buildTypes {
        buildTypes.each {
            it.buildConfigField "String", "API_SERVER_URL", "\"${getUfrilProperty('tsl.api.server')}\""
        }

        release {
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
        }
    }
    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies.txt'
    }
    packagingOptions {
        exclude 'lib/arm64-v8a/libcardioDecider.so'
        exclude 'lib/arm64-v8a/libcardioRecognizer.so'
        exclude 'lib/arm64-v8a/libcardioRecognizer_tegra2.so'
        exclude 'lib/arm64-v8a/libopencv_core.so'
        exclude 'lib/arm64-v8a/libopencv_imgproc.so'
        exclude 'lib/armeabi/libcardioDecider.so'
        exclude 'lib/armeabi-v7a/libcardioDecider.so'
        exclude 'lib/armeabi-v7a/libcardioRecognizer.so'
        exclude 'lib/armeabi-v7a/libcardioRecognizer_tegra2.so'
        exclude 'lib/armeabi-v7a/libopencv_core.so'
        exclude 'lib/armeabi-v7a/libopencv_imgproc.so'
        exclude 'lib/mips/libcardioDecider.so'
        exclude 'lib/x86/libcardioDecider.so'
        exclude 'lib/x86/libcardioRecognizer.so'
        exclude 'lib/x86/libcardioRecognizer_tegra2.so'
        exclude 'lib/x86/libopencv_core.so'
        exclude 'lib/x86/libopencv_imgproc.so'
        exclude 'lib/x86_64/libcardioDecider.so'
        exclude 'lib/x86_64/libcardioRecognizer.so'
        exclude 'lib/x86_64/libcardioRecognizer_tegra2.so'
        exclude 'lib/x86_64/libopencv_core.so'
        exclude 'lib/x86_64/libopencv_imgproc.so'
    }
    productFlavors {
    }
    defaultConfig {
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.google.android.gms:play-services-location:9.0.2'
    implementation 'com.google.android.gms:play-services-gcm:9.0.2'
    implementation 'com.google.android.gms:play-services-auth:9.0.2'
    implementation 'com.mcxiaoke.volley:library:1.0.19'
    annotationProcessor 'com.jakewharton:butterknife:7.0.1'
    implementation 'com.jakewharton:butterknife:7.0.1'
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    implementation 'com.android.support:multidex:1.0.0'

}

def String getUfrilProperty(String propertyName) {
    String target = getMyProperty('target')
    if (target == 'prod') target = 'prod'
    else target = 'dev'

    propertyName = target + '.' + propertyName
    String prop = getMyProperty(propertyName)
    println "${propertyName}: ${prop}"
    return prop
}

def String getMyProperty(String propertyName) {
    String prop = "null"
    if (hasProperty(propertyName)) {
        prop = this.properties[propertyName]
    }
    return prop
}